/**
 * Avoid the need to install nestjs-i18n in order to use the types
 * -> as the i18n.d.ts file is generated by the library and use this type
 */
declare module 'nestjs-i18n' {
	type IsAny<T> = unknown extends T ? ([keyof T] extends [never] ? false : true) : false;

	type PathImpl<T, Key extends keyof T> = Key extends string
		? IsAny<T[Key]> extends true
			? never
			: T[Key] extends Record<string, unknown>
			?
					| `${Key}.${PathImpl<T[Key], Exclude<keyof T[Key], keyof unknown[]>> & string}`
					| `${Key}.${Exclude<keyof T[Key], keyof unknown[]> & string}`
			: never
		: never;

	type PathImpl2<T> = PathImpl<T, keyof T> | keyof T;

	export type Path<T> = keyof T extends string
		? PathImpl2<T> extends infer P
			? P extends string | keyof T
				? P
				: keyof T
			: keyof T
		: never;
}
